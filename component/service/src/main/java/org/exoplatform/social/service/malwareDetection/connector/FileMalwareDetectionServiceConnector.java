package org.exoplatform.social.service.malwareDetection.connector;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.exoplatform.commons.file.model.FileItem;
import org.exoplatform.commons.file.services.FileService;
import org.exoplatform.container.xml.InitParams;
import org.exoplatform.services.log.ExoLogger;
import org.exoplatform.services.log.Log;

public class FileMalwareDetectionServiceConnector extends MalwareDetectionServiceConnector {
  
  private static final Log LOGGER = ExoLogger.getExoLogger(FileMalwareDetectionServiceConnector.class);
  private FileService fileService;
  
  public FileMalwareDetectionServiceConnector(InitParams initParams, FileService fileService) {
    super(initParams);
    this.fileService = fileService;
  }
  
  @Override
  public List<Map<String, String>> getInfectedItems(String infectedFilePath) {
    String fileChecksum = getInfectedFileChecksum(infectedFilePath);
    List<Map<String, String>> infectedItems = new ArrayList<Map<String, String>>();
    try {
      List<FileItem> infectedFileItems = fileService.getFilesByChecksum(fileChecksum);
      for (FileItem infectedFileItem : infectedFileItems) {
        if (infectedFileItem != null && infectedFileItem.getFileInfo() != null) {
          long startTime = System.currentTimeMillis();
          Map<String, String> infectedItem = new HashMap<String, String>();
          infectedItem.put(INFECTED_ITEM_NAME, infectedFileItem.getFileInfo().getName());
          infectedItem.put(INFECTED_ITEM_LAST_MODIFIER, infectedFileItem.getFileInfo().getUpdater());
          infectedItems.add(infectedItem);
          long endTime = System.currentTimeMillis();
          LOGGER.info("service={} operation={} parameters=\"fileId:{}\" \"fileName:{}\" \"lastModifier:{}\" status=ok " + "duration_ms={}",
                      MALWARE_DETECTION_FEATURE,
                      MALWARE_INFECTED_FILE_DETECTION,
                      infectedFileItem.getFileInfo().getId(),
                      infectedFileItem.getFileInfo().getName(),
                      infectedFileItem.getFileInfo().getUpdater(),
                      endTime - startTime);
        }
      }
    } catch (Exception e) {
      LOGGER.error("Error when trying to get the infected item informations", e);
    }
    return infectedItems;
  }
  
  public void cleanInfectedItem(String infectedFilePath) {
    String fileChecksum = getInfectedFileChecksum(infectedFilePath);
    try {
      List<FileItem> infectedFileItems = fileService.getFilesByChecksum(fileChecksum);
      for (FileItem infectedFileItem : infectedFileItems) {
        if (infectedFileItem != null && infectedFileItem.getFileInfo() != null && infectedFileItem.getFileInfo().getId() != null) {
          fileService.deleteFile(infectedFileItem.getFileInfo().getId());
        }
      }
    } catch (Exception e) {
      LOGGER.error("Error when trying to clean the infected item", e);
    }
  }
  
  private String getInfectedFileChecksum(String infectedFilePath) {
    String separator = "";
    if (infectedFilePath.contains(SLASH_SEPARATOR)) {
      separator = SLASH_SEPARATOR;
    }
    else if (infectedFilePath.contains(BACK_SLASH_SEPARATOR)) {
      separator = BACK_SLASH_SEPARATOR;
    }
    return infectedFilePath.substring(infectedFilePath.lastIndexOf(separator) + 1);
  }
}
