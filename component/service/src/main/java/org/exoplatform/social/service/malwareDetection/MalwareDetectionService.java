/**
 * 
 */
package org.exoplatform.social.service.malwareDetection;

import java.util.HashMap;
import java.util.Map;

import org.exoplatform.services.log.ExoLogger;
import org.exoplatform.services.log.Log;
import org.exoplatform.social.service.malwareDetection.connector.MalwareDetectionItemConnector;

/**
 * Is extended by all MalwareDetectionItemConnector connectors, and allows to build configuration needed by a list of connectors that is used for Malware detection.
 * 
 */
public class MalwareDetectionService {
  
  private Map<String, MalwareDetectionItemConnector> itemConnectors = new HashMap<String, MalwareDetectionItemConnector>();
  private static final Log LOGGER = ExoLogger.getExoLogger(MalwareDetectionService.class);
  private static final String SLASH_SEPARATOR = "/";
  private static final String BACK_SLASH_SEPARATOR = "\\";
  
  /**
   * Add Malware detection item connector to the service
   * @param malwareDetectionItemConnector the Malware detection item connector to add
   * @LevelAPI Experimental
   */
  public void addConnector (MalwareDetectionItemConnector malwareDetectionItemConnector) {
    addConnector(malwareDetectionItemConnector, false);
  }
  
  /**
   * Add malware detection item connector to the service
   * @param malwareDetectionItemConnector the malware detection item connector to add
   * @param override equal true if we can override an existing connector, false otherwise
   * @LevelAPI Experimental
   */
  public void addConnector (MalwareDetectionItemConnector malwareDetectionItemConnector, Boolean override) {
    if (itemConnectors.containsKey(malwareDetectionItemConnector.getType()) && override.equals(false)) {
      LOGGER.error("Impossible to add malware detection item {}. A malware detection item with the same type has already been registered.", malwareDetectionItemConnector.getType());
    } else {
      itemConnectors.put(malwareDetectionItemConnector.getType(), malwareDetectionItemConnector);
      LOGGER.info("A Malware detection item connector has been added: {}", malwareDetectionItemConnector.getType());
    }
  }
  
  /**
   * Gets all current item connectors
   * @return Item connectors
   * @LevelAPI Experimental
   */
  public Map<String, MalwareDetectionItemConnector> getItemConnectors() {
    return itemConnectors;
  }
  
  public void processInfectedItem(String infectedItemPath) {
    for (Map.Entry mapentry : itemConnectors.entrySet()) {
      MalwareDetectionItemConnector malwareDetectionItemConnector = (MalwareDetectionItemConnector) mapentry.getValue();
      if (malwareDetectionItemConnector.canProcessInfectedItem(infectedItemPath)) {
        malwareDetectionItemConnector.sendInfectedItemNotification(infectedItemPath);
        malwareDetectionItemConnector.cleanInfectedItem(infectedItemPath);
      }
    }
  }
  
  public static String getPathSeparator(String infectedFilePath) {
    String separator = "";
    if (infectedFilePath.contains(SLASH_SEPARATOR)) {
      separator = SLASH_SEPARATOR;
    }
    else if (infectedFilePath.contains(BACK_SLASH_SEPARATOR)) {
      separator = BACK_SLASH_SEPARATOR;
    }
    return separator;
  }
}