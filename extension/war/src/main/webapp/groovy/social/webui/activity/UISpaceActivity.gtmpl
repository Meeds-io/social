<%
/*
<!--

  Copyright (C) 2003-2013 eXo Platform SAS.
 
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Affero General Public License for more details.
 
  You should have received a copy of the GNU Affero General Public License
  along with this program. If not, see <http://www.gnu.org/licenses/>.

-->
*/

%>
<%
import org.apache.commons.lang.ArrayUtils;
import org.exoplatform.portal.webui.util.Util;
import org.exoplatform.webui.form.UIFormTextAreaInput;
import org.exoplatform.social.core.service.LinkProvider;
import org.exoplatform.social.core.space.model.Space;
import org.exoplatform.social.webui.Utils;
import org.exoplatform.social.core.identity.provider.OrganizationIdentityProvider;
import org.apache.commons.lang.StringEscapeUtils;

import static org.exoplatform.social.webui.activity.BaseUIActivity.TEMPLATE_PARAM_COMMENT;

def pcontext = Util.getPortalRequestContext();
def labelActivityHasBeenDeleted = _ctx.appRes("UIActivity.label.Activity_Has_Been_Deleted");
def activity = uicomponent.getActivity();
def activityDeletable = uicomponent.isActivityDeletable();
def activityCommentAndLikable = uicomponent.isActivityCommentAndLikable();
def streamOwner = activity.getStreamOwner();
%>

<% if (activity) { //process if not null

  def jsManager = pcontext.getJavascriptManager().require("SHARED/uiForm");

  def labelComment = _ctx.appRes("UIActivity.label.Comment");
  def labelComments= _ctx.appRes("UIActivity.comment.commentsLabel");
  def labelCancel = _ctx.appRes("UIActivity.label.Cancel");
  def labelLike = _ctx.appRes("UIActivity.label.Like");
  def labelUpdate = _ctx.appRes("UIActivity.label.Update");
  def labelLikesActivity = _ctx.appRes("UIActivity.label.likesLabel");
  def labelEdit = _ctx.appRes("UIActivity.label.Edit");
  def labelDelete = _ctx.appRes("UIActivity.label.Delete");
  def labelUnlike = _ctx.appRes("UIActivity.label.Unlike");
  def labelViewAllReplies = _ctx.appRes("UIActivity.label.ViewAllReplies");
  def labelSource = _ctx.appRes("UIActivity.label.Source");
  def inputWriteAComment = _ctx.appRes("UIActivity.input.Add_your_comment").replace("'", "\\'");
  def labelShowAllComments = _ctx.appRes("UIActivity.label.Show_All_Comments");
  def labelHideAllComments = _ctx.appRes("UIActivity.label.Hide_All_Comments");
  def labelShowPreviousComments = _ctx.appRes("UIActivity.label.Show_Previous_Comments");

  def captionConfirmation=StringEscapeUtils.escapeHtml(_ctx.appRes("UIActivity.label.Confirmation"));
  def labelToDeleteThisActivity=StringEscapeUtils.escapeHtml(_ctx.appRes("UIActivity.msg.Are_You_Sure_To_Delete_This_Activity"));
  def labelConfirmbutton=StringEscapeUtils.escapeHtml(_ctx.appRes("UIActivity.label.Confirm_Delete_Activity-Button"));
  def labelClosebutton=StringEscapeUtils.escapeHtml(_ctx.appRes("UIActivity.label.Cancel_Delete_Activity-Button"));
  def labelToDeleteThisComment=StringEscapeUtils.escapeHtml(_ctx.appRes("UIActivity.msg.Are_You_Sure_To_Delete_This_Comment"));

  def likeActivityAction = uicomponent.event("LikeActivity", "true");
  def unlikeActivityAction = uicomponent.event("LikeActivity", "false");

  def commentList = uicomponent.getComments();
  int allCommentSize = uicomponent.getAllCommentSize();
  if (allCommentSize > 0) {
    labelShowAllComments = labelShowAllComments.replace("{0}", allCommentSize + "");
    labelHideAllComments = labelHideAllComments.replace("{0}", allCommentSize + "");

  }

  def parentCommentsSize = uicomponent.getParentCommentsSize(commentList);
  def commentsHidden = allCommentSize-parentCommentsSize;
  def commentListStatus = uicomponent.getCommentListStatus();
  def spaceURL = uicomponent.getSpaceURL();
  def spaceGroupId = uicomponent.getSpaceGroupId();
  def commentFormDisplayed = uicomponent.isCommentFormDisplayed();
  def placeholder = _ctx.appRes("UIActivity.comment.placeholder").replace("'", "\\'");

  // labels
  def LikePopupTitleLabel = _ctx.appRes("UIActivity.title.PopupCommentLikers");
  def IgnoreLabel = _ctx.appRes("UserProfilePopup.label.Ignore");
  def ConnectLabel = _ctx.appRes("UserProfilePopup.label.Connect");
  def ConfirmLabel = _ctx.appRes("UserProfilePopup.label.Confirm");
  def CancelRequestLabel = _ctx.appRes("UserProfilePopup.label.CancelRequest");
  def RemoveConnectionLabel = _ctx.appRes("UserProfilePopup.label.RemoveConnection");
  def labels = """ {
    LikePopupTitle: '$LikePopupTitleLabel',
    Connect: '$ConnectLabel',
    Confirm: '$ConfirmLabel',
    CancelRequest: '$CancelRequestLabel',
    RemoveConnection: '$RemoveConnectionLabel',
    Ignore: '$IgnoreLabel'
  }"""

  //params for init UIActivity javascript object
  def params = """ {
    activityId: '${activity.id}',
    placeholderComment: '${placeholder}',
    inputWriteAComment: '$inputWriteAComment',
    commentMinCharactersAllowed: '${uicomponent.getCommentMinCharactersAllowed()}',
    commentMaxCharactersAllowed: '${uicomponent.getCommentMaxCharactersAllowed()}',
    commentFormDisplayed: '$commentFormDisplayed',
    spaceURL:'$spaceURL',
    spaceGroupId: '$spaceGroupId',
    allCommentSize: '${allCommentSize}',
    commentFormFocused: '${uicomponent.isCommentFormFocused()}',
    labels: $labels
  } """

  jsManager.require("SHARED/jquery", "jq")
          .require("SHARED/bts_tooltip").addScripts("jq('*[rel=\"tooltip\"]').tooltip();")
          .require("SHARED/social-ui-activity", "activity").addScripts("activity.onLoad($params);");

  //make sures commentFormFocused is set to false to prevent any refresh to focus, only focus after post a comment
  uicomponent.setCommentFormFocused(false);
  def ownerName, ownerUri = "#", ownerAvatar, activityPostedTime, activityPostedTimeInSpace, activityUpdatedTime, absolutePostedTime;

  activityPostedTime = uicomponent.getRelativeTimeLabel(_ctx, activity.postedTime);
  activityUpdatedTime =uicomponent.getRelativeTimeLabel(_ctx, activity.updated.getTime());
  activityUpdatedTime =	_ctx.appRes("UIActivity.label.EditedFrom").replace("{0}",activityUpdatedTime);
  absolutePostedTime = uicomponent.getAbsolutePostedTime(activity.postedTime);
  def spaceID, spaceImageSource;
  def ownerIdentity = uicomponent.ownerIdentity;
  def profile = ownerIdentity.profile;
  def spaceCreatorIdentity = uicomponent.getSpaceCreatorIdentity();
  Space space = Utils.getSpaceService().getSpaceByPrettyName(ownerIdentity.remoteId);
  if (space != null) {
    spaceID = space.getId();
    spaceImageSource = space.getAvatarUrl();
    if (spaceImageSource == null) {
      spaceImageSource = LinkProvider.SPACE_DEFAULT_AVATAR_URL;
    }
  }
  if (uicomponent.isUserActivity()) {
    ownerUri = LinkProvider.getUserProfileUri(ownerIdentity.getRemoteId());
    ownerAvatar = profile.avatarUrl;
    ownerName = StringEscapeUtils.escapeHtml(profile.fullName);
    if (!ownerAvatar) ownerAvatar= LinkProvider.PROFILE_DEFAULT_AVATAR_URL;
  } else if(uicomponent.isSpaceActivity()){
    if (space != null) {
      managers = space.getManagers();
      ownerUri = Utils.getSpaceHomeURL(space);
      ownerAvatar = space.avatarUrl;
      ownerName = StringEscapeUtils.escapeHtml(space.displayName);
      ownerDescription = StringEscapeUtils.escapeHtml(space.description);
      ownerMembers = space.members;
    } else {
      ownerName = StringEscapeUtils.escapeHtml(ownerIdentity.profile.fullName);
      ownerAvatar = ownerIdentity.profile.avatarUrl;
      if (ownerAvatar == null) {
        ownerAvatar = LinkProvider.SPACE_DEFAULT_AVATAR_URL;
      }
      ownerUri = LinkProvider.getActivityUriForSpace(ownerIdentity.getRemoteId(), ownerIdentity.getRemoteId());
      ownerDescription = null;
      ownerMembers = null;
    }
    if (!ownerAvatar) ownerAvatar = LinkProvider.SPACE_DEFAULT_AVATAR_URL;
  } else {
    ownerUri = profile.url;
    ownerAvatar = profile.avatarUrl;
    ownerName = StringEscapeUtils.escapeHtml(profile.fullName);
  }
  def currentTime = System.currentTimeMillis();

  def spaceCreatorUri, spaceCreatorAvatar, spaceCreatorName;

  if ( OrganizationIdentityProvider.NAME == spaceCreatorIdentity.getProviderId() ) {
    spaceCreatorUri = LinkProvider.getUserProfileUri(spaceCreatorIdentity.getRemoteId());
    spaceCreatorAvatar = spaceCreatorIdentity.profile.avatarUrl;
    if (!spaceCreatorAvatar) spaceCreatorAvatar = LinkProvider.PROFILE_DEFAULT_AVATAR_URL;
    spaceCreatorName = StringEscapeUtils.escapeHtml(spaceCreatorIdentity.profile.fullName);
  } else {
    spaceCreatorAvatar = spaceCreatorIdentity.profile.avatarUrl;
    if (!spaceCreatorAvatar) spaceCreatorAvatar = LinkProvider.SPACE_DEFAULT_AVATAR_URL;
    spaceCreatorUri = LinkProvider.getActivityUriForSpace(streamOwner, streamOwner);
  }

  String viewActivityTip = _ctx.appRes("UIActivity.msg.ViewActivity");
  def deleteActivityTip = _ctx.appRes("UIActivity.msg.DeleteActivity");
  def viewerId = Utils.getViewerIdentity().getId();
  %>

  <div class="activityStream uiActivityStreamWrapper uiSpaceActivity" id="activityContainer${activity.id}">
  <% uiform.begin() %>
	<div id="boxContainer" class="boxContainer">
		<div id="ContextBox${activity.id}" class="uiBox contentBox uiComposer">
			<div class="heading">
      <div class="activityHeader">
				<span class="arrowLeft"></span>
      <div class="activityAvatar avatarCircle">
        <a href="$spaceCreatorUri">
        <img alt="$spaceCreatorName" src="$spaceCreatorAvatar"/>
      </a>
      </div>
  <div class="activityAuthorAndDate">
      <div class="author">
        <!--<div class="hidden-desktop circleSpaceAvatar">
          <a  href="$ownerUri" space-data="$spaceID">$ownerName
            <img alt="$ownerName" src="$spaceImageSource"/>
          </a>
        </div>-->
      <div class="ownerName">
    					<a  href="$spaceCreatorUri">$spaceCreatorName</a>
    		</div>
      <div class="owner">
        <a class="space-avatar spaceName" href="$ownerUri" space-data="$spaceID">
          <span class="uiIconArrowRightMini uiIconLightGray"></span>
          <img class="avatarMini" alt="$ownerName" src="$spaceImageSource"/>&nbsp;$ownerName
        </a>
      </div>
    </div>
		<div class="dataInfor">
			<span class="dateTime"><i class="uiIconClock  uiIconLightGray"></i>&nbsp;<a id="EditActivityTime${activity.id}" rel="tooltip" data-placement="bottom" title="$absolutePostedTime" href="<%=uicomponent.getActivityPermalink(activity.id)%>" <% if(activity.postedTime != activity.updated.getTime() ){%>> $activityUpdatedTime <%} else {%> >$activityPostedTime <%}%></a></span>
    </div>
  </div><!--end activityAuthorAndDate-->
  <div id="dropDownEditActivity${activity.id}" class="btn-group uiDropdownWithIcon actLink">
  <div class="dropdown-toggle" data-toggle="dropdown">
  <i class="uiIconActivityAction uiIconLightGray">
  </i>
                        </div>
  <ul class="dropdown-menu pull-right" role="menu">
  <li>
  <a id="Permalink${activity.id}" rel="tooltip" data-placement="bottom" title="$viewActivityTip" href="<%=uicomponent.getActivityPermalink(activity.id)%>">$viewActivityTip</a>
  </li>
  <%
  if (activityDeletable) {
  %>
  <li>
  <a href="javascript:void(0)" data-confirm="$labelToDeleteThisActivity" data-caption="$captionConfirmation" data-close="$labelClosebutton" data-ok="$labelConfirmbutton"  data-delete="<%=uicomponent.event("DeleteActivity", uicomponent.getId(), "");%>" class="controllDelete" id="DeleteActivityButton${activity.id}">${labelDelete}</a>

                            </li>
  <%}%>
  </ul>
                    </div>
  </div><!--end activityHeader-->




        </div><!--end heading-->
		<div class="uiBox roundedBottom introBox contentShare">
			<div class="clearfix">
				<div class="pull-left">
					<a href="$ownerUri" class="avatarXMedium">
						  <img src="$ownerAvatar" alt="$ownerName" />
        </a>
				</div>
<div class="text">
<% if (ownerDescription) {%>
<p class="spaceDescription">
$ownerDescription
</p>
						<%}%>
					   <% if (ownerMembers) {%>
					  <div class="spaceMembers">
					  <%
						def numberOfMembers = ownerMembers.length;
						if (numberOfMembers > 1) {%>
						  $numberOfMembers <%=_ctx.appRes("UIActivity.label.Members") %>
						<%} else { %>
						  $numberOfMembers <%=_ctx.appRes("UIActivity.label.Member") %>
					  <%}%>
					  </div>
<%}%>
</div>
			</div>
</div><!--end contentShare-->
  		<div class="desktop-input clearfix">
	  		<div class="blastInputPeople hideEffect">
		  		<div>
			  		<% uicomponent.renderChild(uicomponent.COMPOSER_TEXT_AREA_EDIT_INPUT+activity.id); %>
				  <div class="uiAction paddingAction">
				  	<button class="btn pull-left btn-primary" onclick="<%=uicomponent.event("EditActivity")%>" id="EditActivityButton${activity.id}">${labelUpdate}</button>&nbsp;
<button href="javascript:void(0)" data-cancel-edit-comment-id="${activity.id}" class="btn pull-left" id="DeleteEditCommentButton${activity.id}">${labelCancel}</button>
				  </div>
</div>
            </div>
</div>

<% _ctx.includeTemplates("UIActivityActionBar-actions-mobile") %>

 <div class="actionsDetailsWrapper">
  <% _ctx.includeTemplates("UIActivityListLiked") %>
  <% _ctx.includeTemplates("UIActivityActionBar-actions") %>
</div><!--end actionBar and list like people wrapper-->

	    <div id="CommentBlockBound${activity.id}" class="commentBox ">
	      <% if (uicomponent.commentListToggleable()) {
	      def showAllCommentsAction = uicomponent.event("SetCommentListStatus", "all");
	      def hideAllCommentsAction = uicomponent.event("SetCommentListStatus", "none");
	      def loadPreviousCommentsAction = uicomponent.event("SetCommentListStatus", "all");
	      %>

	    <div class="commentList">
	    <%
	    def commenterFullName, commenterProfileUri, commentMessage, commentPostedTime, commenterAvatarImgSrc, commentAbsolutePostedTime;
	    def first = true, commentContentClass;
	    def commentCounter = 0;
        def subCommentSize = 0;
        def subCommentIndex = 0;
        def subCommentClass = "";
        def hideSubComments = true;
	    def updatedCommentId = uicomponent.getAndSetUpdatedCommentId(null);
        def showSubComments = false;
        def updatedComment;
        if (updatedCommentId) {
          updatedComment = Utils.getActivityManager().getActivity(updatedCommentId);
        }
        commentList.each({
          commentCounter++;
          if (first & !uicomponent.commentListToggleable()) {
              commentContentClass = "commentContent";
              first = false;
          } else {
              commentContentClass = "";
          }

          def id = Utils.getIdentityManager().getIdentity(it.userId);
          commenterFullName = StringEscapeUtils.escapeHtml(id.profile.fullName);
          commenterProfileUri = LinkProvider.getUserProfileUri(id.getRemoteId());
          def commentParentClass = it.parentCommentId == null ? "CommentBlock" : (subCommentClass + " subCommentBlock");
          if(it.parentCommentId == null) {
            subCommentSize = uicomponent.getSubCommentsSize(commentList, it.id);
            subCommentIndex = 0;
            if (updatedCommentId) {
              if(updatedComment.parentCommentId == it.id || updatedComment.id == it.id){
                showSubComments = true;
              } else{
                showSubComments = false;
              }
            }
            hideSubComments = subCommentSize > 2 && (updatedCommentId == null || !showSubComments);
            if(hideSubComments){
              subCommentClass = "hidden";
            } else{
              subCommentClass = "";
            }
          } else {
               subCommentIndex++;
               if(hideSubComments && subCommentIndex == subCommentSize) {
                   %>
                  <div class="commentItem clearfix subCommentBlock subCommentShowAll" id="SubCommentShowAll_$it.parentCommentId">
                    <a href="javascript:void(0)" class="subCommentShowAllLink" data-parent-comment="$it.parentCommentId">
                      <%=labelViewAllReplies.replace("{0}", String.valueOf(subCommentSize))%>
                    </a>
</div>
                   <%
               }
          }
	      commentMessage = it.title;
	      commentPostedTime = uicomponent.getRelativeTimeLabel(_ctx, it.postedTime);
		  commentEditedTime = uicomponent.getRelativeTimeLabel(_ctx, it.updated.getTime());
		  commentEditedTime = _ctx.appRes("UIActivity.label.EditedFrom").replace("{0}",commentEditedTime);
		  commentAbsolutePostedTime = uicomponent.getAbsolutePostedTime(it.postedTime);
	      commenterAvatarImgSrc = id.profile.avatarUrl;
	      if (!commenterAvatarImgSrc) commenterAvatarImgSrc = LinkProvider.PROFILE_DEFAULT_AVATAR_URL;
          def commentId = it.parentCommentId == null ? it.id : it.parentCommentId;
	    %>
        <div id="commentContainer${it.id}" data-comment-id="$commentId" data-parent-comment="$it.parentCommentId" class="$commentParentClass">
	      <% if(commentCounter == commentList.size()) { %>
	        <div id="CommentBlock${activity.id}${commentCounter}" class="commentItem commentItemLast">
	      <% } else { %>
            <div id="CommentBlock${it.id}" class="commentItem">
	      <% }  %>
	        <div class="commmentLeft">
	            <a href="$commenterProfileUri" title="$commenterFullName" class="avatarXSmall">
	              <img alt="$commenterFullName" src="$commenterAvatarImgSrc" />
</a>
	        </div><!--end commentLeft-->
      <div class="commentRight">
        <div class="authorCommentContainer clearfix">
          <div class="author">
            <a href="$commenterProfileUri">$commenterFullName</a>
	        </div>
          <div class="contentComment" id="${activity.id}-${commentCounter}">
            $commentMessage
          </div>
        </div>
				<div class="desktop-input clearfix">
					<div class="blastInputPeople hideEffect">
						<div>
							<textarea class="textarea hideEffect paddingAction" name="composerEditComment${it.id}" id="composerEditComment${it.id}" rows="10" cols="30"></textarea>
</div>
						<div class="uiAction">
							<button class="btn pull-left btn-primary" data-edit-comment-id="${it.id}" data-edit-comment-activityid="${activity.id}" data-click="<%= uicomponent.event("EditComment","COMMENTID"); %>" id="EditCommentButton${it.id}">${labelUpdate}</button>&nbsp;
<button href="javascript:void(0)" data-cancel-edit-comment-id="${it.id}" class="btn pull-left" id="DeleteEditCommentButton${it.id}">${labelCancel}</button>
					    </div>
</div>
			    </div>
<%
_ctx.put(TEMPLATE_PARAM_COMMENT, it);
_ctx.put("authorName", id.remoteId);
_ctx.put("authorFullName", commenterFullName);
_ctx.put("activityID", activity.id);
_ctx.put("commentPostedTime", commentPostedTime);
_ctx.put("commentEditedTime", commentEditedTime);
_ctx.put("commentAbsolutePostedTime", commentAbsolutePostedTime);
_ctx.include("war:/groovy/social/webui/activity/UIActivityCommentActions.gtmpl");
%>
</div><!--end commentRight-->
				<div class="clearfix"></div>
<%
def commentEditable = uicomponent.isActivityEditable(it);
def commentDeletable = uicomponent.isCommentDeletable(it.userId)

if(commentEditable || commentDeletable) {
%>
<div id="dropDownEditComment${it.id}" class="btn-group uiDropdownWithIcon actLink">
<div class="dropdown-toggle" data-toggle="dropdown">
<i class="uiIconActivityAction uiIconLightGray">
</i>
                            </div>
<ul class="dropdown-menu pull-right" role="menu">
<% if(commentEditable){%>
<li>
<a id="CommentActivitylink${it.id}" data-edit-comment="${it.id}" class="" href="javascript:void(0)">${labelEdit}</a>
				                </li>
<%
}
if (commentDeletable) {
String idDeleteComment = "DeleteCommentButton${it.id}";
%>
<li>
<a href="javascript:void(0)" id="$idDeleteComment" data-confirm="$labelToDeleteThisComment" data-caption="$captionConfirmation" data-close="$labelClosebutton" data-ok="$labelConfirmbutton"  data-delete="<%= uicomponent.event("DeleteComment", uicomponent.id, it.id); %>"  class="controllDelete">${labelDelete}</a>
				                </li>
<% } %>
</ul>
                        </div>
<%}%>
</div>
	     </div>
<% }) %>
</div> <!--end commentlist-->
	    <div class="inputContainer" id="InputContainer${activity.id}">
	    <%
	      def currentCommenterIdentity = uicomponent.getCommenterIdentity();
	      def currentCommenterUri = LinkProvider.getUserProfileUri(currentCommenterIdentity.getRemoteId());
	      def currentCommenterAvatar = currentCommenterIdentity.profile.avatarUrl;
	      def currentCommenterName = StringEscapeUtils.escapeHtml(currentCommenterIdentity.profile.fullName);
	      if (!currentCommenterAvatar) currentCommenterAvatar= LinkProvider.PROFILE_DEFAULT_AVATAR_URL;
	    %>
	    <% if (commentList.size() == 0) { %>
	      <div class="commentItem noCommentFormBox" id="CommentFormBlock${activity.id}">
	    <% } else { %>
	      <div class="commentItem commentFormBox" id="CommentFormBlock${activity.id}">
	    <% } %>
	            <div class="commmentLeft">
	                <a title="$currentCommenterName" href="$currentCommenterUri" class="avatarXSmall">
	                   <img alt="$currentCommenterName" src="$currentCommenterAvatar"/>
</a>
	            </div><!--end commentLeft-->
<div class="commentRight">
<div class="commentInputBox ">
<div class="commentInput"><% uicomponent.renderChild(UIFormTextAreaInput.class); %></div>
						<button class="btn pull-left btn-primary" data-comment-button="${activity.id}" data-click="<%= uicomponent.event("PostComment", "COMMENTID") %>" id="CommentButton${activity.id}">$labelComment</button>
<button class="btn visible-phone" id="CancelButton${activity.id}">$labelCancel</button>
	                </div>
</div><!--end commentRight-->
                <div class="clearfix"></div>
</div> <!--end commentItem-->
	      </div><!--end commentlist-->

<div class="commentListInfo clearfix">
	        <% if (commentListStatus.getStatus().equals("latest") || commentListStatus.getStatus().equals("none")) { %>
	          <a onclick="$showAllCommentsAction" href="javascript:void(0);">$labelShowAllComments</a>
<% } else if (commentListStatus.getStatus().equals("all")) { %>
<% if (commentsHidden > 0) { %>
<a onclick="$loadPreviousCommentsAction" href="javascript:void(0);">$labelShowPreviousComments</a>
	      <% } else { %>
	        <a onclick="$hideAllCommentsAction" href="javascript:void(0);">$labelHideAllComments</a>
<% } %>
<% } %>
</div>
	    <% } %>


</div><!--end commentBox-->
    </div> <!--end ContextBox${activity.id}-->
</div> <!-- #boxContainer-->
  <% uiform.end() %>
</div><!--activityStream-->
<% } else { %> <!-- activity deleted -->
<div class="activityStream deleted">$labelActivityHasBeenDeleted</div>
<% }%>
