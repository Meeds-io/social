<%
/*
<!--

    Copyright (C) 2003-2010 eXo Platform SAS.

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public License
    as published by the Free Software Foundation; either version 3
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, see<http://www.gnu.org/licenses/>.

-->
*/
%>

<%
  import org.exoplatform.container.ExoContainerContext;
  import org.exoplatform.commons.api.settings.ExoFeatureService;
  import org.exoplatform.social.webui.composer.UIActivityComposerContainer;
  import org.exoplatform.social.core.space.SpaceUtils;
  import org.exoplatform.services.security.Identity;
  import org.exoplatform.services.security.ConversationState;

  ExoFeatureService featureService = ExoContainerContext.getCurrentContainer().getComponentInstanceOfType(ExoFeatureService.class);
  boolean isMainStreamComposerEnabled = System.getProperty("exo.config.mainStreamComposer.enabled").equals("true");
  //check if space has redactors
  Boolean spaceHasRedactors = false;
  Boolean isCurrentUserRedactor = false;
  if(uicomponent.getSpaceGroupId()) {
    String SpaceGroupId = uicomponent.getSpaceGroupId();
    List<String> spaceRedactors = SpaceUtils.findMembershipUsersByGroupAndTypes(SpaceGroupId, "redactor");
    if (!spaceRedactors.isEmpty()) {
      spaceHasRedactors = true;
      //check if user connected is redactor!!!!
      ConversationState currentState = ConversationState.getCurrent();
      String currentUserId = currentState.getIdentity().getUserId();
      isCurrentUserRedactor = spaceRedactors.contains(currentUserId);
    }
  }
  if(featureService.isActiveFeature("new-composer")) {
    if (uicomponent.getSpaceGroupId() != null && (!spaceHasRedactors || isCurrentUserRedactor) || isMainStreamComposerEnabled ) {
%>
<div id="activityComposer"></div>
<script>
  require(['SHARED/jquery', 'SHARED/ActivityComposer'], function(jq, activityComposerApp) {
    activityComposerApp.init();
  });
</script>
<%
    }
  }
%>

<div id="ComposerContainer" class="clearfix">
  <%
    uicomponent.renderChild(UIActivityComposerContainer.class);
  %>
</div>
